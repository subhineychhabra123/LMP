<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Users extends REST_Controller {

    function __construct($config = 'rest')
    {

    header('Access-Control-Allow-Origin: *');
    header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");
     header("Access-Control-Allow-Headers:*");
        // Construct the parent class
        parent::__construct();
        $this->load->model('user_m');
        $this->load->helper('string');
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function hash ($string)
    {
        return hash('sha512', $string . config_item('encryption_key'));
    }

    public function login_post(){

        $email = $this->post('email');
        $password = $this->hash($this->post('password'));

        $data = array('email' => $email ,'password'=>$password ,'user_status'=>'active');

        $result =$this->db->get_where('users', $data)->row();
        unset($result->password);

        if($result){

             $this->set_response($result, REST_Controller::HTTP_CREATED);

         }else{

            $result = array('error' => 'User Not Exist');
            $this->set_response($result, REST_Controller::HTTP_CREATED);
         }
       

    }


    public function forget_password_post(){

        $email = $this->post('email');

        $id = random_string('numeric', 6) ;

        if($this->user_m->reset_pass_key($id , $email)){

            $this->email->from('info@zytrio.com', 'Zytrio');
                $this->email->to($email);
                $this->email->subject('Reset Password');
                $this->email->message('Your One Time password: '.$id.'');
                $this->email->send();
        $this->response([
                 'status' => TRUE,
                'message' => 'OTP send Successfully',
                'otp'=> $id
            ], REST_Controller::HTTP_OK);
        }else{
            $this->set_response([
                'status' => FALSE,
                'message' => 'Email Not Found'
            ], REST_Controller::HTTP_NOT_FOUND);
        }
    }

    public function reset_password_post(){

        $key = $this->post('otp');

        $password = $this->post('password');
        if($this->user_m->key_match($key))
            {   

                if($password){
                      $email_addr = $this->user_m->get_email($key) ;
                      $email = $email_addr->email ;
        if($this->user_m->update_pass($email ,$password)){

                $this->email->from('info@zytrio.com', 'zytrio Store');
                    $this->email->to($email);
                    $this->email->subject('Reset Password');
                    $this->email->message('Your Password reset sucessfully');
                    $this->email->send();
                $this->response([
                'status' => TRUE,
                'message' => 'Reset Password Successfull'
            ], REST_Controller::HTTP_OK);
                    }
                }
                $this->response('OTP matched', REST_Controller::HTTP_OK);
            }else{


                $this->set_response([
                'status' => FALSE,
                'message' => 'Wrong OTP'
            ], REST_Controller::HTTP_NOT_FOUND);
            }
    }


    public function register_post(){

        $email  = $this->post('email');

        $this->db->where('email', $email);
        $result = $this->db->get('users')->result();
        if(count($result) > 0){
            $this->set_response([
                'status' => FALSE,
                'message' => 'Email Already Exist'
            ], REST_Controller::HTTP_NOT_FOUND);
        }else{
              $data =  array(
                'id' => '',
                'first_name' => $this->post('first_name'),
                'last_name' => $this->post('last_name'),
                'email' => $this->post('email'),
                'password' => $this->hash($this->post('password')),
                'user_type'=>'users',
                'user_status' => 'active',
                'created_at' => '' ,
                'updated_at' => '' ,
            );

    $result =  $this->db->insert('users', $data);
    if($result){
        $this->response('Registerd Successfully', REST_Controller::HTTP_OK);
    }else{
        $this->set_response([
                'status' => FALSE,
                'message' => 'Something Went Wrong'
            ], REST_Controller::HTTP_NOT_FOUND);
    }
        
        }
     
    }


}
